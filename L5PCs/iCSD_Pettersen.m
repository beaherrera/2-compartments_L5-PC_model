function iCSD_Pettersen(tf, Ih, lfp, lfpT, fileL5PCS)

%% iCSD_Pettersen computes the CSD generated by a cortical column accoding to the iCSD model
% iCSD model was proposed by Pettersen et al. 2006
% Input:
%       tf: [ms]simulation time.
%       Ih: indicates if you are processing the data generated with Ih
%           present if equal to 1, or with Ih blocked if equal to 0. This
%           variable is used to save the data.
%       lfp: [channels x time pts] local field potential resulted from the
%           average over trials (10 trials in the case of our paper)
%       lfpT: [channels X time pts X trials] local field potential of each
%           trial.
%       fileL5PCS: name of the folder where the data will be saved. The
%           folder will be inside the folder GenerateFigures\FiguresData
% Output:
%   CSD plots and saved data.
% Herrera et al., 2020

%% Simulation time
t0 = 0; %[ms] start time
dt = 0.1;  %[ms] time increment
Fs = 10e3; % [Hz] sampling frequency
tspan = t0:dt:(tf*1e3);  %[ms] time span
tspan = tspan(1:(numel(tspan)-1));

%% filtering LFPs at 90 Hz
lfp = lfp.*1e-3; % mV -> volts

Ve = eegfilt(lfp, Fs, 0, 90,0,250);

%% Parameters
Ne = 16; % number of electrodes in the shank
a = 0.1; % [mm] position of the first electrode
elec_spacing = 0.1; % [mm] electrode spacing
ze = a:elec_spacing:((Ne-1)*elec_spacing + a); % [m] electrode positions with respect to the pia surface
el_pos = ze*1e-3; % mm -> m
cond = 0.323; %[S/m] gray matter conductance
cond_top = cond; %[S/m] conductance at the top (cylinder)
gauss_sigma = 0.1*1e-3;   %[m] Gaussian filter std
filter_range = 5*gauss_sigma; % numeric filter must be finite in extent
diam = 3e-3; % [m] cylinder diameter

%% solve Pettersen model
Fcs = F_cubic_spline(el_pos,diam,cond,cond_top);

[zs,CSD_cs] = make_cubic_splines(el_pos,Ve,Fcs);
if ~isempty(gauss_sigma) && gauss_sigma~=0 %filter iCSD
    [zs,CSD_cs] = gaussian_filtering(zs,CSD_cs,gauss_sigma,filter_range);
end
iCSD = CSD_cs.*1e-3; % [uA/mm3] current source density
zs = zs*1e3; % m -> mm

%% Visualization
font = 14;

figure;
imagesc(tspan, zs, iCSD(:,1:length(tspan)));
c = colorbar;
colormap(jet);
c.Label.String = '\muA/mm^{3}';
c.Label.FontSize = font;
max_CSD = max(abs(iCSD), [], 'all');
bar_min = -max_CSD;
bar_max = max_CSD;
caxis([bar_min bar_max]);
ax = gca;
ax.FontSize = font;
xlabel('Time (ms)', 'FontSize',font);
ylabel('z (mm)','FontSize',font);
title(['CSD of the mean LFP. Filter: \sigma=' num2str(gauss_sigma.*1e3) ' mm'])

%% save
cd ../
file = ['GenerateFigures\FiguresData\' fileL5PCS];
if ~exist(file, 'dir') % checks if the folder already exists
    mkdir(file);  % creates a folder named 'file'
end

if Ih % Ih present
    save([file '\CSD.mat'], 'tspan', 'zs', 'iCSD');
else % Ih blocked
    save([file '\CSDNoIh.mat'], 'tspan', 'zs', 'iCSD');
end

cd L5PCs

%% Trials CSD
% computing the CSD generated by each trial

if ~isempty(lfpT)
    
    clear lfp Ve
    
    % pre-allocating memory
    iCSDT = zeros(size(iCSD, 1), size(iCSD, 2),length(lfpT(1,1,:)));
    zsT = zeros(length(zs),length(lfpT(1,1,:)));
    
    for trial=1:length(lfpT(1,1,:))
        
        clear CSD_cs
        
        %% filtering LFPs at 90 Hz
        
        lfp = squeeze(lfpT(:,:,trial)).*1e-3; % mV -> volts
        
        Ve = eegfilt(lfp, Fs, 0, 90,0,250);
        
        %         figure;
        %         plot(tspan, Ve);
        %         xlabel('Time (ms)', 'FontSize',font);
        %         ylabel('LFP (\muV)','FontSize',font);
        
        %% solve Pettersen model
        Fcs = F_cubic_spline(el_pos,diam,cond,cond_top);
        
        [zsT(:,trial),CSD_cs] = make_cubic_splines(el_pos,Ve,Fcs);
        if ~isempty(gauss_sigma) && gauss_sigma~=0 %filter iCSD
            [zsT(:,trial),CSD_cs] = gaussian_filtering(zsT(:,trial),CSD_cs,gauss_sigma,filter_range);
        end
        iCSDT(:,:,trial) = CSD_cs.*1e-3; % [uA/mm3] current source density
        zsT(:,trial) = zsT(:,trial)*1e3; % m -> mm
        
        %%
        
        figure;
        imagesc(tspan, zs, CSD_cs.*1e-3);
        c = colorbar;
        colormap(jet);
        c.Label.String = '\muA/mm^{3}';
        c.Label.FontSize = font;
        max_CSD = max(abs(CSD_cs.*1e-3), [], 'all');
        bar_min = -max_CSD;
        bar_max = max_CSD;
        caxis([bar_min bar_max]);
        ax = gca;
        ax.FontSize = font;
        xlabel('Time (ms)', 'FontSize',font);
        ylabel('z (mm)','FontSize',font);
        title(['Filter: \sigma=' num2str(gauss_sigma.*1e3) ' mm'])
        
        %%
        
        cd ../
        file = ['GenerateFigures\FiguresData\' fileL5PCS];
        if Ih % Ih present
            save([file '\CSDT.mat'], 'tspan', 'zsT', 'iCSDT');
        else % Ih blocked
            save([file '\CSDNoIhT.mat'], 'tspan', 'zsT', 'iCSDT');
        end
        cd L5PCs
    end
end
end
